import { question } from "readline-sync";

const IntCode = [
  3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 101, 14, 135, 224, 101, -69,
  224, 224, 4, 224, 1002, 223, 8, 223, 101, 3, 224, 224, 1, 224, 223, 223, 102,
  90, 169, 224, 1001, 224, -4590, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 1,
  224, 1, 224, 223, 223, 1102, 90, 45, 224, 1001, 224, -4050, 224, 4, 224, 102,
  8, 223, 223, 101, 5, 224, 224, 1, 224, 223, 223, 1001, 144, 32, 224, 101, -72,
  224, 224, 4, 224, 102, 8, 223, 223, 101, 3, 224, 224, 1, 223, 224, 223, 1102,
  36, 93, 225, 1101, 88, 52, 225, 1002, 102, 38, 224, 101, -3534, 224, 224, 4,
  224, 102, 8, 223, 223, 101, 4, 224, 224, 1, 223, 224, 223, 1102, 15, 57, 225,
  1102, 55, 49, 225, 1102, 11, 33, 225, 1101, 56, 40, 225, 1, 131, 105, 224,
  101, -103, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 2, 224, 1, 224, 223,
  223, 1102, 51, 39, 225, 1101, 45, 90, 225, 2, 173, 139, 224, 101, -495, 224,
  224, 4, 224, 1002, 223, 8, 223, 1001, 224, 5, 224, 1, 223, 224, 223, 1101, 68,
  86, 224, 1001, 224, -154, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 1, 224, 1,
  224, 223, 223, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0,
  256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0,
  99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225,
  225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1,
  99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 108, 226,
  677, 224, 1002, 223, 2, 223, 1006, 224, 329, 1001, 223, 1, 223, 1007, 226,
  226, 224, 1002, 223, 2, 223, 1006, 224, 344, 101, 1, 223, 223, 1008, 226, 226,
  224, 102, 2, 223, 223, 1006, 224, 359, 1001, 223, 1, 223, 107, 226, 677, 224,
  1002, 223, 2, 223, 1005, 224, 374, 101, 1, 223, 223, 1107, 677, 226, 224, 102,
  2, 223, 223, 1006, 224, 389, 101, 1, 223, 223, 108, 677, 677, 224, 102, 2,
  223, 223, 1006, 224, 404, 1001, 223, 1, 223, 1108, 677, 226, 224, 102, 2, 223,
  223, 1005, 224, 419, 101, 1, 223, 223, 1007, 677, 226, 224, 1002, 223, 2, 223,
  1006, 224, 434, 101, 1, 223, 223, 1107, 226, 226, 224, 1002, 223, 2, 223,
  1006, 224, 449, 101, 1, 223, 223, 8, 677, 226, 224, 102, 2, 223, 223, 1006,
  224, 464, 1001, 223, 1, 223, 1107, 226, 677, 224, 102, 2, 223, 223, 1005, 224,
  479, 1001, 223, 1, 223, 1007, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 494,
  1001, 223, 1, 223, 1108, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 509, 101,
  1, 223, 223, 1008, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 524, 1001, 223,
  1, 223, 107, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 539, 101, 1, 223,
  223, 7, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 554, 101, 1, 223, 223,
  1108, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 569, 1001, 223, 1, 223,
  107, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 584, 101, 1, 223, 223, 7,
  677, 226, 224, 1002, 223, 2, 223, 1005, 224, 599, 101, 1, 223, 223, 108, 226,
  226, 224, 1002, 223, 2, 223, 1005, 224, 614, 101, 1, 223, 223, 1008, 677, 226,
  224, 1002, 223, 2, 223, 1005, 224, 629, 1001, 223, 1, 223, 7, 226, 677, 224,
  102, 2, 223, 223, 1005, 224, 644, 101, 1, 223, 223, 8, 677, 677, 224, 102, 2,
  223, 223, 1005, 224, 659, 1001, 223, 1, 223, 8, 226, 677, 224, 102, 2, 223,
  223, 1006, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226,
];

const parameterMap = new Map([
  [`1`, 3],
  [`01`, 3],
  [`2`, 3],
  [`02`, 3],
  [`3`, 1],
  [`03`, 1],
  [`4`, 1],
  [`04`, 1],
  [`5`, 2],
  [`05`, 2],
  [`6`, 2],
  [`06`, 2],
  [`7`, 3],
  [`07`, 3],
  [`8`, 3],
  [`08`, 3],
  [`99`, 0],
]);

function operator(arrayToUse, cIndex) {
  const operatorCode = String(arrayToUse[cIndex]).slice(-2);
  const parameterMode = String(arrayToUse[cIndex])
    .padStart(parameterMap.get(operatorCode) + 2, "0")
    .slice(0, -2)
    .split(``)
    .reverse();

  let param1 = parameterMode[0] === `1` ? cIndex + 1 : arrayToUse[cIndex + 1];
  let param2 = parameterMode[1] === `1` ? cIndex + 2 : arrayToUse[cIndex + 2];
  let param3 = parameterMode[2] === `1` ? cIndex + 3 : arrayToUse[cIndex + 3];

  switch (operatorCode) {
    case `1`:
    case `01`:
      arrayToUse[param3] = arrayToUse[param1] + arrayToUse[param2];
      return cIndex + parameterMap.get(`1`) + 1;
    case `2`:
    case `02`:
      arrayToUse[param3] = arrayToUse[param1] * arrayToUse[param2];
      return cIndex + parameterMap.get(`2`) + 1;
    case `3`:
    case `03`:
      // let input = window.prompt("Enter input: ");
      let input = question("Enter input:");
      arrayToUse[param1] = Number(input);
      return cIndex + parameterMap.get(`3`) + 1;
    case `4`:
    case `04`:
      console.log(arrayToUse[param1]);
      return cIndex + parameterMap.get(`4`) + 1;
    case `5`:
    case `05`:
      if (arrayToUse[param1] !== 0) {
        return arrayToUse[param2];
      } else {
        return cIndex + parameterMap.get(`5`) + 1;
      }
    case `6`:
    case `06`:
      if (arrayToUse[param1] === 0) {
        return arrayToUse[param2];
      } else {
        return cIndex + parameterMap.get(`6`) + 1;
      }
    case `7`:
    case `07`:
      if (arrayToUse[param1] < arrayToUse[param2]) {
        arrayToUse[param3] = 1;
      } else {
        arrayToUse[param3] = 0;
      }
      return cIndex + parameterMap.get(`7`) + 1;
    case `8`:
    case `08`:
      if (arrayToUse[param1] === arrayToUse[param2]) {
        arrayToUse[param3] = 1;
      } else {
        arrayToUse[param3] = 0;
      }
      return cIndex + parameterMap.get(`8`) + 1;
    default:
      return null;
  }
}

function operatorCaller(arrayToUse) {
  let currentIndex = 0;
  while (currentIndex !== null && currentIndex < arrayToUse.length) {
    currentIndex = operator(arrayToUse, currentIndex);
  }
  return arrayToUse;
}

operatorCaller(IntCode);
